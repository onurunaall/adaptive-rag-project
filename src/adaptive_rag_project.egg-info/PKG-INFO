Metadata-Version: 2.4
Name: adaptive_rag_project
Version: 0.2.0
Summary: Adaptive RAG with Llama-3 and integrated workflows.
Author-email: Onur Ãœnal <upklw@student.kit.edu>
License: MIT
Requires-Python: <3.13,>=3.9
Description-Content-Type: text/markdown
License-File: LICENSE
Requires-Dist: langchain<0.3.0,>=0.2.0
Requires-Dist: langchain-community<0.3.0,>=0.2.0
Requires-Dist: langchain-core<0.3.0,>=0.2.0
Requires-Dist: langchain-openai<0.2.0,>=0.1.0
Requires-Dist: langchain-google-genai<2.0.0,>=1.0.0
Requires-Dist: langgraph<0.3.0,>=0.2.0
Requires-Dist: langchain-experimental<0.1.0,>=0.0.50
Requires-Dist: openai<2.0.0,>=1.0.0
Requires-Dist: chromadb<0.6.0,>=0.4.22
Requires-Dist: pydantic<3.0.0,>=2.0.0
Requires-Dist: pydantic-settings<3.0.0,>=2.0.0
Requires-Dist: python-dotenv<2.0.0,>=1.0.0
Requires-Dist: pypdf<5.0.0,>=4.0.0
Requires-Dist: beautifulsoup4<5.0.0,>=4.12.0
Requires-Dist: tiktoken<1.0.0,>=0.5.0
Requires-Dist: streamlit<2.0.0,>=1.35.0
Requires-Dist: tavily-python<0.4.0,>=0.3.0
Requires-Dist: rank-bm25<0.3.0,>=0.2.0
Requires-Dist: requests<3.0.0,>=2.31.0
Requires-Dist: numpy<2.0.0,>=1.24.0
Requires-Dist: scikit-learn<2.0.0,>=1.3.0
Provides-Extra: dev
Requires-Dist: pytest<9.0.0,>=7.4.0; extra == "dev"
Requires-Dist: pytest-mock<4.0.0,>=3.12.0; extra == "dev"
Requires-Dist: pytest-asyncio<1.0.0,>=0.21.0; extra == "dev"
Requires-Dist: black<25.0.0,>=23.0.0; extra == "dev"
Requires-Dist: flake8<8.0.0,>=6.1.0; extra == "dev"
Requires-Dist: mypy<2.0.0,>=1.5.0; extra == "dev"
Requires-Dist: pytest-cov<6.0.0,>=4.1.0; extra == "dev"
Provides-Extra: mcp
Requires-Dist: mcp<2.0.0,>=1.0.0; extra == "mcp"
Dynamic: license-file

# InsightEngine: Adaptive Information Retrieval & Analysis Platform

## Overview

InsightEngine is an intelligent system designed to consume, understand, and analyze diverse information from multiple sources. It moves beyond simple Q&A bots by employing an adaptive Retrieval-Augmented Generation (RAG) process and agentic capabilities to perform complex, multi-step tasks. The ultimate purpose is to provide a versatile and reliable platform that significantly enhances your ability to extract insights, get answers, and accomplish complex information-based tasks by intelligently leveraging modern AI techniques.

## Key Features

* **Diverse Information Consumption**:
    * Ingest documents provided by users (PDFs, text files).
    * Process content from web pages via URLs.
    * Integrate specialized, dynamic data streams such as live stock news and targeted web scrapes.
* **Adaptive RAG (Retrieval-Augmented Generation)**:
    * **Sophisticated Retrieval**: Fetches potentially relevant information from its knowledge base (ChromaDB vector stores).
    * **Relevance Grading**: Assesses the quality of retrieved information for answering specific questions.
    * **Query Rewriting**: If initial information is insufficient, it can rewrite questions for clarity and effectiveness and retry retrieval, considering chat history.
    * **Web Search Fallback**: Can reach out to the internet (using Tavily Search) for up-to-date information if local documents don't suffice.
    * **Grounded Generation**: Generates answers based *only* on the relevant information gathered.
    * **Self-Correction & Grounding Check**: Critically checks its own answers for grounding in source documents to prevent hallucinations. If issues are detected, it can attempt to self-correct by regenerating the answer with feedback.
    * **Conversational Context**: Supports follow-up questions by maintaining and utilizing chat history.
* **Agentic Capabilities (Insight Agent)**:
    * Accepts high-level, multi-step goals from the user.
    * Autonomously plans and executes necessary steps using available tools (data fetching, ingestion into the RAG engine, querying the knowledge base).
    * Synthesizes comprehensive results for complex tasks.
* **User-Friendly Interface**:
    * A Streamlit web application (`src/main_app.py`) provides access to all functionalities, including data ingestion management, direct RAG Q&A, and the advanced Insight Agent.

## Architecture Overview

InsightEngine is built around a modular architecture:

* **`CoreRAGEngine` (`src/core_rag_engine.py`)**: The central processing unit responsible for the entire adaptive RAG workflow, including ingestion, indexing, querying, and the self-correction mechanisms. It supports multiple LLM and embedding providers (OpenAI, Ollama, Google).
* **Data Feed Modules**:
    * `src/stock.py`: Provides `fetch_stock_news_documents()` for fetching and formatting stock news.
    * `src/scraper.py`: Provides `scrape_urls_as_documents()` for fetching and formatting content from web URLs.
* **Agentic Loop (`src/loop.py`)**: Implements the `AgentLoopWorkflow` (Insight Agent), enabling the system to perform complex multi-step tasks using the `CoreRAGEngine` and data feed tools.
* **Streamlit UI (`src/main_app.py`)**: The main entry point for users, integrating all functionalities.

## API Key Configuration**:
* Create a file named `.env` in the root directory of the project.
 * Add your API keys to this file:
     ```env
     OPENAI_API_KEY="your_openai_api_key"
     TAVILY_API_KEY="your_tavily_api_key"
     GOOGLE_API_KEY="your_google_api_key" # Optional, if using Google LLMs/Embeddings

     # Optional: Override CoreRAGEngine defaults
     # LLM_PROVIDER="openai" # openai, ollama, google
     # LLM_MODEL_NAME="gpt-4o"
     # EMBEDDING_PROVIDER="openai" # openai, gpt4all, google
     # EMBEDDING_MODEL_NAME="text-embedding-3-small"
     ```

## How to Run

To start the InsightEngine application, run the following command from the project's root directory:

```bash
streamlit run src/main_app.py
